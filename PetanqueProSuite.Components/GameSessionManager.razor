@using PetanqueProSuite.Components.Tournament
@using PetanqueProSuite.Domain.Sessions

<ul class="nav nav-tabs my-3">
    <li class="nav-item d-flex align-items-center me-2 my-2">
        <a class="btn btn-primary" @onclick="AddSession">+</a>
    </li>
    @foreach (IGameSession session in SessionManager.Sessions.Where(c=>c.GetType() == Type))
    {
        <li class="nav-item d-flex align-items-center">
            <a class="nav-link @CheckIfActive(session)" @onclick="() => NavClick(session)">@session.ToString() <button class="btn btn-danger ms-1" @onclick="() => DeleteSession(session)">X</button></a>
        </li>
    }
</ul>

@if(SessionManager.SelectedSession != null)
{
    if(Type == typeof(CompetitionSession)){
        @*         <CompetitionComponent Competition="SelectedSession" />  *@
    }else if(Type == typeof(TournamentSession))
    {
        <TournamentComponent Session="(TournamentSession)SessionManager.SelectedSession" />
    }
}

@code {
    [Parameter] public Type Type { get; set; }
    [Inject] private IGameSessionManager SessionManager { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    private string CheckIfActive(IGameSession session)
    {
        return SessionManager.SelectedSession == session ? "active" : "";
    }
    private void NavClick(IGameSession session)
    {
        SessionManager.SelectSession(session);
    }
    private void AddSession()
    {
        switch(Type)
        {
            case Type competitionType when competitionType == typeof(TournamentSession):
                NavigationManager.NavigateTo("/tournament/start");
                break;
        }
    }
    private void DeleteSession(IGameSession session)
    {
        SessionManager.RemoveSession(session);
    }
}